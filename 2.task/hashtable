/*
 * Tabuľka s rozptýlenými položkami
 *
 * S využitím dátových typov zo súboru hashtable.h a pripravených kostier
 * funkcií implementujte tabuľku s rozptýlenými položkami s explicitne
 * zreťa
 * zenými synonymami.
 *
 *
 * Pri implementácii uvažujte veľkosť tabuľky HT_SIZE.
 */

#include "hashtable.h"
#include <stdlib.h>
#include <string.h>

int HT_SIZE = MAX_HT_SIZE;

/*
 * Rozptyľovacia funkcia ktorá pridelí zadanému kľúču index z intervalu
 * <0,HT_SIZE-1>. Ideálna rozptyľovacia funkcia by mala rozprestrieť kľúče
 * rovnomerne po všetkých indexoch. Zamyslite sa nad kvalitou zvolenej funkcie.
 */
int get_hash(char *key) {
  int result = 1;
  int length = strlen(key);
  for (int i = 0; i < length; i++) {
    result += key[i];
  }
  return (result % HT_SIZE);
}

/*
 * Inicializácia tabuľky — zavolá sa pred prvým použitím tabuľky.
 */
void ht_init(ht_table_t *table) 
{
	for (int i = 0; i < HT_SIZE; i++)
	{
		(*table)[i] = NULL;
	}
}

/*
 * Vyhľadanie prvku v tabuľke.
 *
 * V prípade úspechu vráti ukazovateľ na nájdený prvok; v opačnom prípade vráti
 * hodnotu NULL.
 */
ht_item_t *ht_search(ht_table_t *table, char *key) 
{
        for (int i = 0; i < HT_SIZE; i++)
        {
		ht_item_t* tmp = (*table)[i];
                while ( tmp != NULL)
		{
			if (key == tmp->key)
			{
				return tmp;
			}
			tmp = tmp->next;
		}
        }
	return NULL;
}

/*
 * Vloženie nového prvku do tabuľky.
 *
 * Pokiaľ prvok s daným kľúčom už v tabuľke existuje, nahraďte jeho hodnotu.
 *
 * Pri implementácii využite funkciu ht_search. Pri vkladaní prvku do zoznamu
 * synonym zvoľte najefektívnejšiu možnosť a vložte prvok na začiatok zoznamu.
 */
void ht_insert(ht_table_t *table, char *key, float value) 
{

	if (ht_search(table, key) != NULL)
	{
		ht_search(table, key)->value = value;
		return;
	}
	
	if ((*table)[get_hash(key)] == NULL)
	{
		(*table)[get_hash(key)] = malloc(sizeof(ht_item_t));
                ((*table)[get_hash(key)])->next = NULL;
                ((*table)[get_hash(key)])->key = key;
                ((*table)[get_hash(key)])->value = value;
	}
        else
        {
                ht_item_t* tmp;
                tmp = (*table)[get_hash(key)];
                (*table)[get_hash(key)] = malloc(sizeof(ht_item_t));
                ((*table)[get_hash(key)])->next = tmp;
                ((*table)[get_hash(key)])->key = key;
                ((*table)[get_hash(key)])->value = value;
    	}
	
}

/*
 * Získanie hodnoty z tabuľky.
 *
 * V prípade úspechu vráti funkcia ukazovateľ na hodnotu prvku, v opačnom
 * prípade hodnotu NULL.
 *
 * Pri implementácii využite funkciu ht_search.
 */
float *ht_get(ht_table_t *table, char *key) 
{
	if (ht_search(table, key) != NULL) return &((ht_search(table, key))->value);
	return NULL;
}

/*
 * Zmazanie prvku z tabuľky.
 *
 * Funkcia korektne uvoľní všetky alokované zdroje priradené k danému prvku.
 * Pokiaľ prvok neexistuje, nerobte nič.
 *
 * Pri implementácii NEVYUŽÍVAJTE funkciu ht_search.
 */
void ht_delete(ht_table_t *table, char *key) 
{
	ht_item_t* ptr1 = (*table)[get_hash(key)];
	ht_item_t* ptr2 = ptr1->next;
	if (((*table)[get_hash(key)])->key == key)
	{
		(*table)[get_hash(key)] = (*table)[get_hash(key)]->next;
		free (ptr1);
		return;
	}
	
	while (ptr1 != NULL)
	{
		if (ptr2->key == key)
		{
			ptr1->next = ptr1->next->next;
			free(ptr2);
			return;
		}
		ptr1 = ptr1->next;
		ptr2 = ptr2->next;
	}
}

/*
 * Zmazanie všetkých prvkov z tabuľky.
 *
 * Funkcia korektne uvoľní všetky alokované zdroje a uvedie tabuľku do stavu po
 * inicializácii.
 */
void ht_delete_all(ht_table_t *table) 
{
        for (int i = 0; i < HT_SIZE; i++)
        {
                if ((*table)[i] != NULL)
                {
                	ht_item_t* ptr1;
                        ht_item_t* ptr2;
                        ptr1 = (*table)[i];
                        while (ptr1 != NULL)
                        {
                        	ptr2 = ptr1;
                                ptr1 = ptr1->next;
                                free(ptr2);
                        }
			(*table)[i] = NULL;
                }
        }
}







